articles:
- slug: "sqlite"
  title: "初尝 SQLite"
  created: 2019-04-04T01:05:13+0800
  tags:
  - note
  - sql
  - sqlite
  preview: ~
- slug: "rust_double_ref"
  title: 感性理解 Rust 多重引用与命
  created: 2019-02-02T01:23:00+0800
  tags:
  - rust
  - lifetime
  - type
  preview: |
    **注意：本文分析为本人随机推断的，没读过 rustc 源码，仅供感性理解，如有错误请 [issue](/?article=about)。**

    考虑 Rust 分可不可变引用，以两层为例，那么我们就有四种情况：
    - `&'a &'b T`
    - `&'a &'b mut T`
    - `&'a mut &'b T`
    - `&'a mut &'b mut T`

    对上述类型各自解引用（`*`）会得到一个一级引用，显然只有最后一个结果是可变引用，但它们各自的命是多长？

    > 我把“ lifetime ”翻译为“命”，它另一个更广泛的译名是“生命周期”。
    > 我觉得这个“周期”概念完全是无中生有，所以不太喜欢用。
    > 你们知道是一个东西就好，我在其他地方也可能这么说，恕不复述。

- slug: "docker"
  title: "Notes about Docker"
  created: 2018-09-13T21:38:57+0800
  tags:
  - note
  - docker
  preview: |
    > Docker 大概就是一个轻量 VM 罢了。

- slug: "router"
  title: "Notes about Router"
  created: 2018-09-11T16:35:00+0800
  tags:
  - "note"
  - "network"
  - "linux"
  preview: |
    > 路由器不过是一台低配 Linux 罢了

- slug: "markdown"
  title: "Notes about Markdown"
  created: 2018-09-06T00:53:00+0800
  tags:
  - "note"
  - "markdown"
  preview: |
    > _Markdown_ 不过是个极简文本排版语言罢了。

- slug: "letsencrypt"
  title: "Notes about Let's Encrypt Certbot"
  created: 2018-09-06T00:10:00+0800
  tags:
  - "note"
  - "letsencrypt"
  - "ssl"
  - "linux"
  - "certbot"
  preview: |
    > [_Let's Encrypt_](https://letsencrypt.org/) 不过是个免费 SSL 证书签发单位罢了。

    > [_Certbot_](https://certbot.eff.org/) 不过是个自动 SSL 证书签发/续命脚本罢了。

- slug: "about"
  title: "About"
  created: 2016-01-31T15:56:13.532+0800
  tags:
  - "blog"
  preview: ~
