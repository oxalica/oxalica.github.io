articles:
- slug: "scp_rsync"
  title: "Notes about scp & rsync"
  created: 2019-09-29T02:17:40+0800
  tags:
  - note
  - linux
  - cli
  preview: |
    > 没啥，就是复制文件而已...

- slug: "show_float"
  title: "0.1 + 0.2 = ?"
  created: 2019-07-24T00:32:11+0800
  tags:
  - float
  - meaningless
  preview: |
    > [dram][dram]: 我就是想知道为什么浮点误差大家都有，但是 0.1 + 0.2 永远是 JavaScript

    [dram]: https://github.com/dramforever/

- slug: "crypto_security"
  title: "密码学上需要注意的一些 安全性"
  created: 2019-06-26T17:23:03+0800
  tags:
  - note
  - crypto
  preview: |
    > 感觉 title 怪怪的，不过也找不到一个更合适的词来概括这些内容

- slug: "rust_grammar"
  title: "寻找 Rust Grammar 之路"
  created: 2019-06-16T22:49:58+0800
  tags:
  - rust
  - parser
  preview: |
    > 因为最近需要（Ummm，等我 pub 了再加链接），所以在找一个具体完善的 Grammar of Rust Language

    **TLDR: [The Rust Reference][rust_reference]**

    [rust_reference]: https://doc.rust-lang.org/nightly/reference

- slug: "kademlia"
  title: "粗学 DHT ： Kademlia 算法"
  created: 2019-06-07T23:24:21+0800
  tags:
  - distributed
  - algorithm
  preview: |
    > 最近对 P2P 分布式系统比较感兴趣

    # 0. Pre

    之前在思考“假如每个 IPv6 都随机生成的话，有办法规划低于 $( O(n) )$ 的路由算法吗？”

    群里有人提到了 DHT 可以解决，即 [Distributed Hash Table][dht] ，分布式哈希表。

    于是正好学习一下。（又好久没写 blog 了）

    [dht]: https://en.wikipedia.org/wiki/Distributed_hash_table

- slug: "btime"
  title: "Linux 上该死的 文件创建时间/btime/crtime"
  created: 2019-04-05T03:15:25+0800
  tags:
  - c
  - linux
  - unix
  - fs
  - todo
  preview: |
    # 0. Pre

    ```rust
    Err(Custom { kind: Other, error: StringError("creation time is not available on this platform currently") })
    ```

    ```text
    $ stat a
    File: a
    Size: 8               Blocks: 8          IO Block: 4096   regular file
    Device: 10304h/66308d   Inode: 5539622     Links: 1
    Access: (0644/-rw-r--r--)  Uid: ( 1000/     oxa)   Gid: ( 1000/     oxa)
    Access: 2019-04-05 03:11:44.957769917 +0800
    Modify: 2019-04-05 03:11:33.415664402 +0800
    Change: 2019-04-05 03:11:33.415664402 +0800
    Birth: -
    ```

    不支持个鬼咯，老娘用的如此高端文件系统 ext4 连 _文件创建时间_ 都没有的吗？

    **其实当然是有的啦**

- slug: "sqlite"
  title: "初尝 SQLite"
  created: 2019-04-04T01:05:13+0800
  tags:
  - note
  - sql
  - sqlite
  preview: ~

- slug: "rust_double_ref"
  title: 感性理解 Rust 多重引用与命
  created: 2019-02-02T01:23:00+0800
  tags:
  - rust
  - lifetime
  - type
  preview: |
    **注意：本文分析为本人随机推断的，没读过 rustc 源码，仅供感性理解，如有错误请 [issue](/?article=about)。**

    考虑 Rust 分可不可变引用，以两层为例，那么我们就有四种情况：
    - `&'a &'b T`
    - `&'a &'b mut T`
    - `&'a mut &'b T`
    - `&'a mut &'b mut T`

    对上述类型各自解引用（`*`）会得到一个一级引用，显然只有最后一个结果是可变引用，但它们各自的命是多长？

    > 我把“ lifetime ”翻译为“命”，它另一个更广泛的译名是“生命周期”。
    > 我觉得这个“周期”概念完全是无中生有，所以不太喜欢用。
    > 你们知道是一个东西就好，我在其他地方也可能这么说，恕不复述。

- slug: "docker"
  title: "Notes about Docker"
  created: 2018-09-13T21:38:57+0800
  tags:
  - note
  - docker
  - cli
  preview: |
    > Docker 大概就是一个轻量 VM 罢了。

- slug: "router"
  title: "Notes about Router"
  created: 2018-09-11T16:35:00+0800
  tags:
  - "note"
  - "network"
  - "linux"
  preview: |
    > 路由器不过是一台低配 Linux 罢了

- slug: "markdown"
  title: "Notes about Markdown"
  created: 2018-09-06T00:53:00+0800
  tags:
  - "note"
  - "markdown"
  preview: |
    > _Markdown_ 不过是个极简文本排版语言罢了。

- slug: "letsencrypt"
  title: "Notes about Let's Encrypt Certbot"
  created: 2018-09-06T00:10:00+0800
  tags:
  - "note"
  - "letsencrypt"
  - "ssl"
  - "linux"
  - "certbot"
  preview: |
    > [_Let's Encrypt_](https://letsencrypt.org/) 不过是个免费 SSL 证书签发单位罢了。

    > [_Certbot_](https://certbot.eff.org/) 不过是个自动 SSL 证书签发/续命脚本罢了。

- slug: "about"
  title: "About"
  created: 2016-01-31T15:56:13+0800
  tags:
  - "blog"
  preview: ~
